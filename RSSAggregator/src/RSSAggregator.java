import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author C. Zhao
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html> ");
        out.println("<head> ");
        out.print("<title>");

        int linkElem = getChildElement(channel, "link");
        int titleElem = getChildElement(channel, "title");
        int descElem = getChildElement(channel, "description");
        /*
         * Insert Title
         */

        /*
         * You have to see if title and description have children before calling
         * child() on them. You also don't have to check if title and
         * description exist. If you look at the RSS slides, they are guaranteed
         * to be children of channel
         */
        if (channel.child(titleElem).numberOfChildren() > 0) {
            out.print(channel.child(titleElem).child(0).label());
        } else {
            out.print("Title Unavailable");
        }

        out.print("</title>");
        out.println("</head>");
        out.println("<body>");
        /*
         * Insert Link
         */
        out.println("<h1><a href=\"" + channel.child(linkElem).child(0).label()
                + "\">" + channel.child(titleElem).child(0).label()
                + "</a></h1>");
        /*
         * Insert Description
         */
        if (channel.child(descElem).numberOfChildren() > 0
                && channel.child(descElem).numberOfChildren() != 0) {
            out.println("<p>" + channel.child(descElem).child(0) + "</p>");
        } else {
            out.println("Description Unavailable");
        }
        out.println("<table border= \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int elementNum = -1;
        for (int indexChild = 0; indexChild < xml
                .numberOfChildren(); indexChild++) {
            if (tag.equals(xml.child(indexChild).label())) {
                elementNum = indexChild;
            }
        }
        return elementNum;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int titleElem = getChildElement(item, "title");
        int descElem = getChildElement(item, "description");
        int linkElem = getChildElement(item, "link");
        int pubDateElem = getChildElement(item, "pubDate");
        int sourceElem = getChildElement(item, "source");
        /*
         * Print Date block
         */
        out.println("<tr>");
        out.print("<td>");
        if (pubDateElem != -1) {
            out.print(item.child(pubDateElem).child(0).label());
        } else {
            out.print("Publication Date Unavailable");
        }
        out.println("</td>");
        /*
         * print source block
         */
        out.print("<td>");
        if (sourceElem != -1
                && (item.child(sourceElem).numberOfChildren() > 0)) {
            out.print("<a href=\""
                    + item.child(sourceElem).attributeValue("url") + "\">");
            out.print(item.child(sourceElem).child(0).label() + "</a>");
        } else {
            out.print("Source Unavailable");
        }
        out.println("</td>");
        /*
         * print title/link news block
         */

        out.print("<td>");
        if (linkElem != -1) {
            out.print("<a href=\"" + item.child(linkElem).child(0).label()
                    + "\">");

            if (titleElem != -1
                    && (item.child(titleElem).numberOfChildren() > 0)) {
                out.print(item.child(titleElem).child(0).label());
            } else if (descElem != -1
                    && (item.child(descElem).numberOfChildren() > 0)) {
                out.print(item.child(descElem).child(0).label());
            } else {
                out.print("Title Unavailable");
            }

            out.print("</a>");
        }
        out.println("</td>");

        /*
         * close row
         */
        out.println("</tr>");
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the feed tag title as the page title</title> </head>
     * <body>
     * <h1>Page title
     * <h1>
     * <p>
     * <ul>
     *
     * @param feeds
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <feeds> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputFeedsHeader(XMLTree feeds, SimpleWriter out) {
        out.println("<html> ");
        out.println("<head> ");
        out.print("<title>");

        /*
         * Insert Title
         */
        out.print(feeds.attributeValue("title"));
        out.print("</title>");
        out.println("</head>");
        out.println("<body>");
        out.print("<h1>" + feeds.attributeValue("title") + "</h1>\n</p>");
        out.println("<ul>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param htmlFeedOut
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads feed from url, saves HTML document with list of rss links
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, SimpleWriter htmlFeedOut) {
        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree feeds = new XMLTree1(url);
        /*
         * Print out the feed header
         */
        outputFeedsHeader(feeds, htmlFeedOut);
        /*
         * pass the feed through a loop which calls checkRSS which creates an
         * html site for the rss tree passed in from this loop
         */
        for (int feedIndex = 0; feedIndex < feeds
                .numberOfChildren(); feedIndex++) {
            htmlFeedOut.print("<li><a href=\""
                    + feeds.child(feedIndex).attributeValue("file") + "\">");
            htmlFeedOut.print(feeds.child(feedIndex).attributeValue("name"));
            htmlFeedOut.println("</a></li>");

            checkRSS(feeds.child(feedIndex).attributeValue("url"),
                    feeds.child(feedIndex).attributeValue("file"));

        }
        /*
         * prints out the feed closer
         */

        htmlFeedOut.println("</body>");
        htmlFeedOut.println("</ul>");

    }

    /**
     * Processes the link from a given URL checking if it is a version 2.0 rss
     * tree and passes it to processItem.
     *
     * @param url
     *            the given url
     * @param file
     *            the name of the resulting output file
     * @updates htmlOut.content
     * @require htmlOut.is_open
     * @ensures
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void checkRSS(String url, String file) {
        /*
         * Create an outstream to print to an html
         */
        SimpleWriter htmlOut = new SimpleWriter1L(file);
        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree xml = new XMLTree1(url);
        /*
         * Extract <channel> element.
         */
        XMLTree channel = xml.child(0);
        /*
         * Check if xml root tag is <rss> and has attribute "version" with value
         * 2.0
         */

        if (xml.label().equals("rss") && xml.hasAttribute("version")) {
            if (Double.parseDouble(xml.attributeValue("version")) == 2.0) {
                /*
                 * create html page
                 */
                outputHeader(channel, htmlOut);
                for (int channelIndex = 0; channelIndex < channel
                        .numberOfChildren(); channelIndex++) {
                    if (channel.child(channelIndex).label()
                            .contentEquals("item")) {
                        processItem(channel.child(channelIndex), htmlOut);
                    }
                }
                outputFooter(htmlOut);
            }
        }

        htmlOut.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Input the source URL.
         */
        out.print("Enter the URL of an html page with multiple rss feeds: ");
        String url = in.nextLine();

        /*
         * Prompt user for name of the output file
         */
        out.print("Enter the name of the output file (Include \".html\"): ");
        String outputFile = in.nextLine();

        SimpleWriter htmlFeedOut = new SimpleWriter1L(outputFile);

        processFeed(url, htmlFeedOut);

        htmlFeedOut.close();
        in.close();
        out.close();
    }

}